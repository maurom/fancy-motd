#!/bin/bash
#
# motd
#
# Fancy motd status inspired
# by /r/unixporn
#
# (c) 2018 Daniel Jankowski


# import the different modules
source modules/cpu.bash
source modules/docker.bash
source modules/filesystems.bash
source modules/hostname.bash
source modules/lastlogin.bash
source modules/memory.bash
source modules/ssl.bash
source modules/systemd-service.bash
source modules/updates.bash


# configure which services should be
# displayed with the systemd-service-module
SERVICES=(
    "NetworkManager"
    "firewalld"
)

# configure which filesystems
# shoudl be displayed with the
# filesystems-module
FILESYSTEMS=(
    "/"
    "/boot"
)

# configure which domains
# the ssl module should display
# the expiration of the Certificate
DOMAINS=(
    "domain.com"
    "example.com"
)


# configure for which users the last
# login should be displayed
USERS=(
    "$USER"
    "root"
)


# configure which containers should
# be checked in the docker-module
CONTAINER=(
    "sql"
    "sf.app"
)


# print the uptime
print_uptime() {
    uptime -p
}


# check for required binaries
ensure_binaries() {
    REQUIRED_BINARIES="df figlet lsb_release openssl sensors systemctl"
    for BINARY in $REQUIRED_BINARIES; do
        if ! which "$BINARY" 2> /dev/null 1>&2; then
            echo "Error: $BINARY command not found"
            exit 72   # EX_OSFILE
        fi
    done
}


# main function and entrypoint of this script
# it runs the different functions from the modules
# and prints a newline in order to seperate the
# outputs.
main() {
    print_hostname
    printf "\n"
    print_uptime
    printf "\n"
    print_filesystems
    printf "\n"
    print_systemd_services_status
    printf "\n"
    print_docker_status
    printf "\n"
    print_cpu_core_temperatures
    printf "\n"
    print_memory_status
    printf "\n"
    print_ssl_expire_date
    printf "\n"
    print_updates
    printf "\n"
    print_last_login
}


# fail fast
set -eo pipefail

ensure_binaries

# execute the main function with commandline arguments
main "$@"
